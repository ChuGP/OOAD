package uml_generator;

import java.awt.BorderLayout;
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.BorderFactory;
import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Map;
import java.util.TreeMap;
import java.awt.event.ActionEvent;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Color;
import java.awt.Dimension;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.JLabel;
import java.awt.GridBagLayout;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.awt.GridLayout;
import java.awt.FlowLayout;
import java.awt.SystemColor;
import java.awt.Toolkit;
import java.awt.Window.Type;
import javax.swing.JTextArea;
import javax.swing.JTable;
import javax.swing.JTextPane;
import javax.swing.JComboBox;
import javax.swing.ListSelectionModel;
import javax.swing.JTabbedPane;
import java.awt.ScrollPane;
import javax.swing.JToolBar;
import java.awt.Component;

import ClassDetailInfo.*;
public class UmlGUI extends JFrame {

	private JPanel contentPane;
	private JTextField textName;
	private JTable variableTable;
	private Map<String,ClassDetailInfo> variableList = new TreeMap<>();
	
	private ClassDetailInfo gp = new ClassDetailInfo();
	private ClassMemberAbstract memberVariable = new MemberVariable();
	private ClassMemberAbstract memberFunction = new MemberFunction();
//	private MemberVariable variableInfo = new MemberVariable();
//	private MemberFunction functionInfo = new MemberFunction();
	private ClassMemberAbstract relationship = new ClassRelarionship();
	
	private JTable functionTable;
	private JTable relationshipTable;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					UmlGUI frame = new UmlGUI();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public UmlGUI() {		
//		setExtendedState(JFrame.MAXIMIZED_BOTH);
		setType(Type.POPUP);
		setTitle("      \t\tUML_GENERATOR");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		Dimension screensize = Toolkit.getDefaultToolkit().getScreenSize();
		int height = (int)screensize.getHeight() ;
		int width = (int)screensize.getWidth() ;
		setBounds(0, 0, 1920, 1080);
		
		contentPane = new JPanel();
		contentPane.setPreferredSize(new Dimension(1920, 1080));

		contentPane.setAlignmentY(Component.TOP_ALIGNMENT);
		contentPane.setAlignmentX(Component.LEFT_ALIGNMENT);
		contentPane.setToolTipText("");
		contentPane.setBorder(new EmptyBorder(10, 10, 10, 10));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		

		// Label
		JLabel className = new JLabel("Class Name");
		className.setBounds(420, 77, 226, 54);
		className.setFont(new Font("Arial", Font.PLAIN, 40));
		contentPane.add(className);
		// Label
		
		// 輸入Class Name的textarea
		textName = new JTextField();
		textName.setBounds(651, 79, 469, 54);
		textName.setFont(new Font("新細明體", Font.PLAIN, 40));
		contentPane.add(textName);
		textName.setColumns(20);
		
		// 顯示框(textArea)
		JTextArea textShowDetail = new JTextArea();
		textShowDetail.setEditable(false);
		textShowDetail.setBounds(1377, 226, 490, 527);
		textShowDetail.setBackground(new Color(211, 211, 211));
		textShowDetail.setForeground(Color.BLACK);
		textShowDetail.setFont(new Font("Arial", Font.PLAIN, 30));
		contentPane.add(textShowDetail);
		// Read Name Button
		JButton btnReadName = new JButton("Read Name");
		btnReadName.setBounds(1134, 85, 193, 39);
		btnReadName.setBackground(new Color(240, 240, 240));
		btnReadName.setFont(new Font("Arial", Font.PLAIN, 26));
//		
		btnReadName.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				System.out.println(textName.getText());
				
				gp.setClassName(textName.getText());
				textName.setText(null);
				String temp = "Class Name: " + gp.getClassName() + "\n";
				textShowDetail.append(temp);
				
				
			}
		});
		contentPane.add(btnReadName);
		
		
		
		
		JLabel lblNewLabel = new JLabel("Member Variable");
		lblNewLabel.setBounds(441, 180, 266, 41);
		lblNewLabel.setFont(new Font("Arial", Font.PLAIN, 35));
		contentPane.add(lblNewLabel);
		
		
		
		JLabel lblClassDetailInfo = new JLabel("Class Detail Info");
		lblClassDetailInfo.setBounds(1458, 170, 284, 51);
		lblClassDetailInfo.setFont(new Font("Arial", Font.PLAIN, 40));
		contentPane.add(lblClassDetailInfo);
		
		JScrollPane scrollPaneVariable = new JScrollPane();
		scrollPaneVariable.setBounds(295, 226, 610, 207);
		contentPane.add(scrollPaneVariable);
		
		variableTable = new JTable();
		JTableHeader headVariable = variableTable.getTableHeader(); // 创建表格标题对象
		headVariable.setPreferredSize(new Dimension(headVariable.getWidth(), 35));// 设置表头大小
		headVariable.setFont(new Font("楷体", Font.PLAIN, 22));// 设置表格字体

		variableTable.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
		variableTable.setToolTipText("");
		variableTable.setFont(new Font("Arial", Font.PLAIN, 20));
		variableTable.setRowHeight(25);
		
		variableTable.setModel(new DefaultTableModel(
			new Object[][] {
				{null, null, null},
				{null, null, null},
				{null, null, null},
				{null, null, null},
				{null, null, null},
				{null, null, null},
				{null, null, null},
				{null, null, null},
				{null, null, null},
				{null, null, null},
				{null, null, null},
				{null, null, null},
				{null, null, null},
				{null, null, null},
				{null, null, null},
				{null, null, null},
			},
			new String[] {
				"Reference", "Variable Type", "Variable Name"
			}
		) {
			Class[] columnTypes = new Class[] {
				String.class, String.class, String.class
			};
			public Class getColumnClass(int columnIndex) {
				return columnTypes[columnIndex];
			}
		});
		variableTable.getColumnModel().getColumn(1).setPreferredWidth(100);
		variableTable.getColumnModel().getColumn(2).setPreferredWidth(300);
		
		// 把ComboBox加入tabel1
		
		TableColumn referenceColumn = variableTable.getColumn("Reference");
		scrollPaneVariable.setViewportView(variableTable);
		
		
		
		
		
		JButton btnReadVariable = new JButton("Read Variable");
		btnReadVariable.setBounds(295, 439, 306, 59);
		btnReadVariable.setFont(new Font("Arial", Font.PLAIN, 26));
		contentPane.add(btnReadVariable);
		btnReadVariable.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				ArrayList<ClassMemberAbstract> member = getTableValue(variableTable,memberVariable);
				gp.clearMemberVariable();
				for ( int i=0; i < member.size();i++)
				{
					gp.setMemberVariable(member.get(i));
					String ans = member.get(i).getReference()+ " " + member.get(i).getType() + " " + member.get(i).getName() ;
					textShowDetail.append(ans);
				}
				variableList.put(gp.getClassName(), gp);
				showOnTextArea(textShowDetail, gp);
			}
		});
		JLabel lblMemberFunction = new JLabel("Member Function");
		lblMemberFunction.setBounds(441, 533, 266, 41);
		lblMemberFunction.setFont(new Font("Arial", Font.PLAIN, 35));
		contentPane.add(lblMemberFunction);
		
		JScrollPane scrollPaneFunction = new JScrollPane();
		scrollPaneFunction.setBounds(295, 579, 610, 310);
		contentPane.add(scrollPaneFunction);
		
		functionTable = new JTable();
		JTableHeader headFunction= functionTable.getTableHeader(); // 创建表格标题对象
		headFunction.setPreferredSize(new Dimension(headFunction.getWidth(), 35));// 设置表头大小
		headFunction.setFont(new Font("楷体", Font.PLAIN, 22));// 设置表格字体
		functionTable.setFont(new Font("Arial", Font.PLAIN, 20));
		
		functionTable.setModel(new DefaultTableModel(
			new Object[][] {
				{null, null, null},
				{null, null, null},
				{null, null, null},
				{null, null, null},
				{null, null, null},
				{null, null, null},
				{null, null, null},
				{null, null, null},
				{null, null, null},
				{null, null, null},
				{null, null, null},
				{null, null, null},
				{null, null, null},
				{null, null, null},
				{null, null, null},
				{null, null, null},
			},
			new String[] {
				"Reference", "Function Type", "Function Name && Parameter"
			}
		) {
			Class[] columnTypes = new Class[] {
				String.class, Object.class, Object.class
			};
			public Class getColumnClass(int columnIndex) {
				return columnTypes[columnIndex];
			}
		});
		functionTable.getColumnModel().getColumn(0).setPreferredWidth(120);
		functionTable.getColumnModel().getColumn(1).setPreferredWidth(150);
		functionTable.getColumnModel().getColumn(2).setPreferredWidth(336);
		functionTable.setRowHeight(25);
		scrollPaneFunction.setViewportView(functionTable);
		
		TableColumn referenceColumn_function = functionTable.getColumn("Reference");
		
		
		
		
		
		
		JButton btnReadFunction = new JButton("Read Function");
		btnReadFunction.setBounds(295, 894, 306, 59);
		btnReadFunction.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
//				ClassMemberAbstract member = getTableValue(functionTable,memberFunction);
//				gp.setMemberFunction(member);
//				variableList.put(gp.getClassName(), gp);
//				showOnTextArea(textShowDetail, gp);

			}
		});
		
		btnReadFunction.setFont(new Font("Arial", Font.PLAIN, 26));
		contentPane.add(btnReadFunction);
		
		JTabbedPane tabbedPane = new JTabbedPane(JTabbedPane.TOP);
		tabbedPane.setBounds(0, 0, 5, 5);
		contentPane.add(tabbedPane);
		
		JPanel panel = new JPanel();
		tabbedPane.addTab("New tab", null, panel, null);
		
		JLabel labelRelation = new JLabel("Class Relationship");
		labelRelation.setFont(new Font("Arial", Font.PLAIN, 35));
		labelRelation.setBounds(1014, 170, 284, 41);
		contentPane.add(labelRelation);
		
		JScrollPane scrollPaneRelationship = new JScrollPane();
		scrollPaneRelationship.setBounds(972, 222, 355, 531);
		contentPane.add(scrollPaneRelationship);
		
		// Relationship_table
		relationshipTable = new JTable();
		JTableHeader headRelationship= relationshipTable.getTableHeader(); // 创建表格标题对象
		headRelationship.setPreferredSize(new Dimension(headRelationship.getWidth(), 35));// 设置表头大小
		headRelationship.setFont(new Font("楷体", Font.PLAIN, 22));// 设置表格字体
		relationshipTable.setFont(new Font("Arial", Font.PLAIN, 20));
		relationshipTable.setModel(new DefaultTableModel(
			new Object[][] {
				{null, null},
				{null, null},
				{null, null},
				{null, null},
				{null, null},
				{null, null},
				{null, null},
				{null, null},
				{null, null},
				{null, null},
				{null, null},
				{null, null},
				{null, null},
				{null, null},
				{null, null},
				{null, null},
				{null, null},
				{null, null},
				{null, null},
				{null, null},
				{null, null},
				{null, null},
				{null, null},
				{null, null},
				{null, null},
			},
			new String[] {
				"Relationship", "Class Name"
			}
		) {
			Class[] columnTypes = new Class[] {
				String.class, String.class
			};
			public Class getColumnClass(int columnIndex) {
				return columnTypes[columnIndex];
			}
		});
		
		TableColumn referenceColumn_relationship = relationshipTable.getColumn("Relationship");
		relationshipTable.setRowHeight(25);
		
		scrollPaneRelationship.setViewportView(relationshipTable);
		
		JButton btnReadRelationship = new JButton("Read Relationship");
		btnReadRelationship.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
//		      relationship = getTableValue(relationshipTable,relationship);
//		      gp.setClassRelarionship(relationship);
//		      variableList.put(gp.getClassName(), gp);
//		      showOnTextArea(textShowDetail, gp);
			}
		});
		btnReadRelationship.setFont(new Font("Arial", Font.PLAIN, 16));
		btnReadRelationship.setBounds(972, 766, 179, 59);
		contentPane.add(btnReadRelationship);
		
		JButton btnDrawSketch = new JButton("Draw Sketch \u2192");
		btnDrawSketch.setFont(new Font("Arial", Font.PLAIN, 26));
		btnDrawSketch.setBounds(1377, 766, 490, 59);
		contentPane.add(btnDrawSketch);
		
		JButton btnClearVariable = new JButton("Clear Variable");
		btnClearVariable.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				clearTableValue(variableTable);
			}
		});
		btnClearVariable.setFont(new Font("Arial", Font.PLAIN, 26));
		btnClearVariable.setBounds(602, 439, 306, 59);
		contentPane.add(btnClearVariable);
		
		JButton btnClearFunction = new JButton("Clear Function");
		btnClearFunction.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				clearTableValue(functionTable);
			}
		});
		btnClearFunction.setFont(new Font("Arial", Font.PLAIN, 26));
		btnClearFunction.setBounds(602, 894, 306, 59);
		contentPane.add(btnClearFunction);
		
		JButton btnClearRelationship = new JButton("Clear Relationship");
		btnClearRelationship.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				clearTableValue(relationshipTable);
			}
		});
		btnClearRelationship.setFont(new Font("Arial", Font.PLAIN, 16));
		btnClearRelationship.setBounds(1151, 766, 179, 59);
		contentPane.add(btnClearRelationship);
		
		JComboBox comboBox_variable = new JComboBox();
		comboBox_variable.setFont(new Font("標楷", Font.PLAIN, 20));
		comboBox_variable.addItem("Public");
		comboBox_variable.addItem("Private");
		comboBox_variable.addItem("Protected");
		referenceColumn.setCellEditor(new DefaultCellEditor(comboBox_variable));
		
		JComboBox comboBox_function = new JComboBox();
		comboBox_function.setFont(new Font("標楷", Font.PLAIN, 20));
		comboBox_function.addItem("Public");
		comboBox_function.addItem("Private");
		comboBox_function.addItem("Protected");
		referenceColumn_function.setCellEditor(new DefaultCellEditor(comboBox_function));
	    
		JComboBox comboBox_relationship = new JComboBox();
		comboBox_relationship.setFont(new Font("標楷", Font.PLAIN, 20));
		comboBox_relationship.addItem("Extension");
		comboBox_relationship.addItem("Implementation");
		comboBox_relationship.addItem("Association");
		comboBox_relationship.addItem("Aggregation");
		comboBox_relationship.addItem("Composition");
		comboBox_relationship.addItem("Dependency");
		referenceColumn_relationship.setCellEditor(new DefaultCellEditor(comboBox_relationship));
		
		
	}
	
	public ArrayList<ClassMemberAbstract> getTableValue(JTable temp,ClassMemberAbstract member)
	{
		ArrayList<ClassMemberAbstract> result =new ArrayList<ClassMemberAbstract>();
		int row = temp.getModel().getRowCount();
		int column = temp.getModel().getColumnCount();
		Object selected=null;
		for (int i=0; i < row; i++)
		{
		  member = new ClassMemberAbstract();
		  for (int j=0; j < column; j++)
		  {
			selected = temp.getModel().getValueAt(i,j);
		    if ( selected != null)
		    {
		      
		      if ( j == 0 ) member.setReference(selected.toString());
			  else if ( j == 1 && temp.getColumnName(j) != "Class Name"  ) member.setType(selected.toString()); // Class Name不是呼叫setType
			  else member.setName(selected.toString());
		    }	    
		  }	  
		  
		  if ( selected != null) result.add(member);
		  else break;
		    
		}
		
		return result;

	}
	
	
	public void clearTableValue(JTable temp)
	{
		int row = temp.getModel().getRowCount();
		int column = temp.getModel().getColumnCount();
		Object selected;		
		for (int i=0; i < row; i++)
		{	  
		  for (int j=0; j < column; j++)
		  {
			temp.getModel().setValueAt("",i,j); 
		  }	  
		}
		
	}
	
	public void showOnTextArea(JTextArea _textShowDetail, ClassDetailInfo _gp) 
	{
		_textShowDetail.setText("");
		if ( ! _gp.getClassName().isEmpty())
		  _textShowDetail.append("Class Name : " + _gp.getClassName() +"\n");
		
		if ( ! _gp.getMemberVariable().isEmpty() )
		  _textShowDetail.append("MemberVariable : " +"\n");
		for ( ClassMemberAbstract temp : _gp.getMemberVariable())
		{
			String ans = temp.getReference()+ " " + temp.getType() + " " + temp.getName() + "\n";
			_textShowDetail.append(ans);
		}
		
		if ( ! _gp.getMemberFunction().isEmpty() )
		  _textShowDetail.append("MemberFunction : " +"\n");
		
		for ( ClassMemberAbstract temp : _gp.getMemberFunction())
		{
			String ans = temp.getReference()+ " " + temp.getType() + " " + temp.getName() + "\n";
			_textShowDetail.append(ans);
		}
		
		if ( ! _gp.getClassRelarionship().isEmpty() )
		  _textShowDetail.append("ClassRelarionship : " +"\n");
		for ( ClassMemberAbstract temp : _gp.getClassRelarionship())
		{
			String ans = temp.getReference()+ " " + temp.getName() + "\n";
			_textShowDetail.append(ans);
		}
	}
	
	
}
