package uml_generator;

import java.awt.BorderLayout;
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.BorderFactory;
import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Map;
import java.util.TreeMap;
import java.awt.event.ActionEvent;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Color;
import java.awt.Dimension;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.JLabel;
import java.awt.GridBagLayout;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.awt.GridLayout;
import java.awt.FlowLayout;
import java.awt.SystemColor;
import java.awt.Toolkit;
import java.awt.Window.Type;
import javax.swing.JTextArea;
import javax.swing.JTable;
import javax.swing.JTextPane;
import javax.swing.JComboBox;
import javax.swing.ListSelectionModel;
import javax.swing.JTabbedPane;
import java.awt.ScrollPane;
import javax.swing.JToolBar;
import java.awt.Component;

import ClassDetailInfo.*;
import viewTool.Tool;
public class UmlGUI extends JFrame {

	private JPanel contentPane;
	private JTextField textName;
	private JTable variableTable;
	private Map<String,ClassDetailInfo> variableList = new TreeMap<>();
	
	private ClassDetailInfo gp = new ClassDetailInfo();
	private ClassMemberAbstract memberVariable = new MemberVariable();
	private ClassMemberAbstract memberFunction = new MemberFunction();
	private ClassMemberAbstract relationship = new ClassRelarionship();
	private JTable functionTable;
	private JTable relationshipTable;
    private Tool tool = new Tool();
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					UmlGUI frame = new UmlGUI();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public UmlGUI() {		
//		setExtendedState(JFrame.MAXIMIZED_BOTH);
		setType(Type.POPUP);
		setTitle("      \t\tUML_GENERATOR");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		Dimension screensize = Toolkit.getDefaultToolkit().getScreenSize();
		int height = (int)screensize.getHeight() ;
		int width = (int)screensize.getWidth() ;
		setBounds(0, 0, 1920, 1080);
		
		contentPane = new JPanel();
		contentPane.setPreferredSize(new Dimension(1920, 1080));

		contentPane.setAlignmentY(Component.TOP_ALIGNMENT);
		contentPane.setAlignmentX(Component.LEFT_ALIGNMENT);
		contentPane.setToolTipText("");
		contentPane.setBorder(new EmptyBorder(10, 10, 10, 10));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		headVariable.setPreferredSize(new Dimension(headVariable.getWidth(), 35));// 设置表头大小
		headVariable.setFont(new Font("楷体", Font.PLAIN, 22));// 设置表格字体
		headFunction.setPreferredSize(new Dimension(headFunction.getWidth(), 35));// 设置表头大小
		headFunction.setFont(new Font("楷体", Font.PLAIN, 22));// 设置表格字体
		
		JTabbedPane tabbedPane = new JTabbedPane(JTabbedPane.TOP);
		tabbedPane.setBounds(0, 0, 5, 5);
		contentPane.add(tabbedPane);
		
		JPanel panel = new JPanel();
		tabbedPane.addTab("New tab", null, panel, null);
		

		// Label
		JLabel className = new JLabel("Class Name");
		panel.add(className);
		className.setFont(new Font("Arial", Font.PLAIN, 50));
		// Label
		
		// 輸入Class Name的textarea
		textName = new JTextField();
		panel.add(textName);
		textName.setFont(new Font("MS Gothic", Font.PLAIN, 50));
		textName.setColumns(20);
		
		// 顯示框(textArea)
		JTextArea textShowDetail = new JTextArea();
		panel.add(textShowDetail);
		textShowDetail.setEditable(false);
		textShowDetail.setBackground(new Color(211, 211, 211));
		textShowDetail.setForeground(Color.BLACK);
		textShowDetail.setFont(new Font("Footlight MT Light", Font.PLAIN, 30));
		// Read Name Button
		JButton btnReadName = new JButton("Read Name");
		panel.add(btnReadName);
		btnReadName.setForeground(Color.WHITE);
		btnReadName.setBackground(new Color(240, 240, 240));
		btnReadName.setFont(new Font("Arial", Font.PLAIN, 26));
		btnReadName.setBackground(Color.BLACK);
		
		
		
		
		JLabel lblNewLabel = new JLabel("Member Variable");
		panel.add(lblNewLabel);
		lblNewLabel.setFont(new Font("Arial", Font.PLAIN, 35));
		
		
		
		JLabel lblClassDetailInfo = new JLabel("Class Detail Info");
		panel.add(lblClassDetailInfo);
		lblClassDetailInfo.setFont(new Font("Arial", Font.PLAIN, 40));
		
		JScrollPane scrollPaneVariable = new JScrollPane();
		panel.add(scrollPaneVariable);
				
				variableTable = new JTable();
				panel.add(variableTable);
				JTableHeader headVariable = variableTable.getTableHeader(); // 创建表格标题对象
				
						variableTable.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
						variableTable.setToolTipText("");
						variableTable.setFont(new Font("Arial", Font.PLAIN, 20));
						variableTable.setRowHeight(25);
						
						variableTable.setModel(new DefaultTableModel(
							new Object[][] {
								{null, null, null},
								{null, null, null},
								{null, null, null},
								{null, null, null},
								{null, null, null},
								{null, null, null},
								{null, null, null},
								{null, null, null},
								{null, null, null},
								{null, null, null},
								{null, null, null},
								{null, null, null},
								{null, null, null},
								{null, null, null},
								{null, null, null},
								{null, null, null},
							},
							new String[] {
								"Reference", "Variable Type", "Variable Name"
							}
						) {
							Class[] columnTypes = new Class[] {
								String.class, String.class, String.class
							};
							public Class getColumnClass(int columnIndex) {
								return columnTypes[columnIndex];
							}
						});
						
						
						
						
						
						JButton btnReadVariable = new JButton("Read Variable");
						panel.add(btnReadVariable);
						btnReadVariable.setForeground(Color.WHITE);
						btnReadVariable.setFont(new Font("Arial", Font.PLAIN, 26));
						btnReadVariable.setBackground(Color.BLACK);
						
						JLabel lblMemberFunction = new JLabel("Member Function");
						panel.add(lblMemberFunction);
						lblMemberFunction.setFont(new Font("Arial", Font.PLAIN, 35));
						
						JScrollPane scrollPaneFunction = new JScrollPane();
						panel.add(scrollPaneFunction);
						
						functionTable = new JTable();
						panel.add(functionTable);
						JTableHeader headFunction= functionTable.getTableHeader(); // 创建表格标题对象
						functionTable.setFont(new Font("Arial", Font.PLAIN, 20));
						
						functionTable.setModel(new DefaultTableModel(
							new Object[][] {
								{null, null, null},
								{null, null, null},
								{null, null, null},
								{null, null, null},
								{null, null, null},
								{null, null, null},
								{null, null, null},
								{null, null, null},
								{null, null, null},
								{null, null, null},
								{null, null, null},
								{null, null, null},
								{null, null, null},
								{null, null, null},
								{null, null, null},
								{null, null, null},
							},
							new String[] {
								"Reference", "Function Type", "Function Name && Parameter"
							}
						) {
							Class[] columnTypes = new Class[] {
								String.class, Object.class, Object.class
							};
							public Class getColumnClass(int columnIndex) {
								return columnTypes[columnIndex];
							}
						});
						functionTable.getColumnModel().getColumn(0).setPreferredWidth(120);
						functionTable.getColumnModel().getColumn(1).setPreferredWidth(150);
						functionTable.getColumnModel().getColumn(2).setPreferredWidth(336);
						functionTable.setRowHeight(25);
						
						
						
						
						
						
						JButton btnReadFunction = new JButton("Read Function");
						panel.add(btnReadFunction);
						btnReadFunction.setForeground(Color.WHITE);
						btnReadFunction.setBackground(Color.BLACK);
						btnReadFunction.addActionListener(new ActionListener() {
							public void actionPerformed(ActionEvent arg0) {
								ArrayList<ClassMemberAbstract> member = tool.getTableValue(functionTable,memberFunction,"Function");
								gp.clearMemberFunction();
								for ( int i=0; i < member.size();i++)
								{
									gp.setMemberFunction(member.get(i));
									String ans = member.get(i).getReference()+ " " + member.get(i).getType() + " " + member.get(i).getName() ;
									textShowDetail.append(ans);
								}
								variableList.put(gp.getClassName(), gp);
								tool.showOnTextArea(textShowDetail, gp);

							}
						});
						
						btnReadFunction.setFont(new Font("Arial", Font.PLAIN, 26));
						
						JLabel labelRelation = new JLabel("Class Relationship");
						panel.add(labelRelation);
						labelRelation.setFont(new Font("Arial", Font.PLAIN, 35));
						
						JButton btnReadRelationship = new JButton("Read Relationship");
						panel.add(btnReadRelationship);
						btnReadRelationship.setForeground(Color.WHITE);
						btnReadRelationship.setBackground(Color.BLACK);
						btnReadRelationship.addActionListener(new ActionListener() {
							public void actionPerformed(ActionEvent e) {
						      ArrayList<ClassMemberAbstract> member = tool.getTableValue(relationshipTable,relationship,"Relation");
							  gp.clearClassRelarionship();
							  for ( int i=0; i < member.size();i++)
							  {
							    gp.setClassRelarionship(member.get(i));
							    String ans = member.get(i).getReference()+ " " + member.get(i).getName() ;
								textShowDetail.append(ans);
							  }
							  variableList.put(gp.getClassName(), gp);
							  tool.showOnTextArea(textShowDetail, gp);
							}
						});
						btnReadRelationship.setFont(new Font("Arial", Font.PLAIN, 16));
						
						JButton btnDrawSketch = new JButton("Draw Sketch \u2192");
						panel.add(btnDrawSketch);
						btnDrawSketch.addActionListener(new ActionListener() {
							public void actionPerformed(ActionEvent e) {
								tool.clearTableValue(variableTable);
								tool.clearTableValue(functionTable);
								tool.clearTableValue(relationshipTable);
								textShowDetail.setText("");
							}
						});
						btnDrawSketch.setFont(new Font("Arial", Font.PLAIN, 26));
						
						JButton btnClearVariable = new JButton("Clear Variable");
						panel.add(btnClearVariable);
						btnClearVariable.setBackground(Color.WHITE);
						btnClearVariable.addActionListener(new ActionListener() {
							public void actionPerformed(ActionEvent e) {
								
								tool.clearTableValue(variableTable);
								gp.clearMemberVariable();
								tool.showOnTextArea(textShowDetail, gp);
							}
						});
						btnClearVariable.setFont(new Font("Arial", Font.PLAIN, 26));
						
						JButton btnClearFunction = new JButton("Clear Function");
						panel.add(btnClearFunction);
						btnClearFunction.setBackground(Color.WHITE);
						btnClearFunction.addActionListener(new ActionListener() {
							public void actionPerformed(ActionEvent e) {
								tool.clearTableValue(functionTable);
								gp.clearMemberFunction();
								tool.showOnTextArea(textShowDetail, gp);
							}
						});
						btnClearFunction.setFont(new Font("Arial", Font.PLAIN, 26));
						
						JButton btnClearRelationship = new JButton("Clear Relationship");
						panel.add(btnClearRelationship);
						btnClearRelationship.setBackground(Color.WHITE);
						btnClearRelationship.addActionListener(new ActionListener() {
							public void actionPerformed(ActionEvent e) {
								tool.clearTableValue(relationshipTable);
								gp.clearClassRelarionship();
								tool.showOnTextArea(textShowDetail, gp);
							}
						});
						btnClearRelationship.setFont(new Font("Arial", Font.PLAIN, 16));
						
						JButton btnClearName = new JButton("Clear Name");
						panel.add(btnClearName);
						btnClearName.setFont(new Font("Arial", Font.PLAIN, 26));
						btnClearName.setBackground(Color.WHITE);
						
						JScrollPane scrollPaneRelationship = new JScrollPane();
						panel.add(scrollPaneRelationship);
						
						// Relationship_table
						relationshipTable = new JTable();
						JTableHeader headRelationship= relationshipTable.getTableHeader(); // 创建表格标题对象
						relationshipTable.setFont(new Font("Arial", Font.PLAIN, 20));
						relationshipTable.setModel(new DefaultTableModel(
							new Object[][] {
								{null, null},
								{null, null},
								{null, null},
								{null, null},
								{null, null},
								{null, null},
								{null, null},
								{null, null},
								{null, null},
								{null, null},
								{null, null},
								{null, null},
								{null, null},
								{null, null},
								{null, null},
								{null, null},
								{null, null},
								{null, null},
								{null, null},
								{null, null},
								{null, null},
								{null, null},
								{null, null},
								{null, null},
								{null, null},
							},
							new String[] {
								"Relationship", "Class Name"
							}
						) {
							Class[] columnTypes = new Class[] {
								String.class, String.class
							};
							public Class getColumnClass(int columnIndex) {
								return columnTypes[columnIndex];
							}
						});
						
						TableColumn referenceColumn_relationship = relationshipTable.getColumn("Relationship");
						relationshipTable.setRowHeight(25);
						
						scrollPaneRelationship.setViewportView(relationshipTable);
						btnClearName.addActionListener(new ActionListener() {
							public void actionPerformed(ActionEvent e) {
								textShowDetail.setText("");
								gp.clearClassName();
								tool.showOnTextArea(textShowDetail, gp);
							}
						});
						
						TableColumn referenceColumn_function = functionTable.getColumn("Reference");
						
						btnReadVariable.addActionListener(new ActionListener() {
							public void actionPerformed(ActionEvent e) {
								ArrayList<ClassMemberAbstract> member = tool.getTableValue(variableTable,memberVariable,"Variable");
								gp.clearMemberVariable();
								for ( int i=0; i < member.size();i++)
								{
									gp.setMemberVariable(member.get(i));
									String ans = member.get(i).getReference()+ " " + member.get(i).getType() + " " + member.get(i).getName() ;
									textShowDetail.append(ans);
								}
								variableList.put(gp.getClassName(), gp);
								tool.showOnTextArea(textShowDetail, gp);
							}
						});
				variableTable.getColumnModel().getColumn(1).setPreferredWidth(100);
				variableTable.getColumnModel().getColumn(2).setPreferredWidth(300);
				
				// 把ComboBox加入tabel1
				
				TableColumn referenceColumn = variableTable.getColumn("Reference");
		btnReadName.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {			
				if ( textName.getText() != null && textName.getText() != "" ) {
					gp.setClassName(textName.getText());
					textName.setText(null);
					tool.showOnTextArea(textShowDetail, gp);
				}
				
				
			}
		});
		headRelationship.setPreferredSize(new Dimension(headRelationship.getWidth(), 35));// 设置表头大小
		headRelationship.setFont(new Font("楷体", Font.PLAIN, 22));// 设置表格字体
		
		JComboBox comboBox_variable = new JComboBox();
		comboBox_variable.setFont(new Font("標楷", Font.PLAIN, 20));
		comboBox_variable.addItem("Public");
		comboBox_variable.addItem("Private");
		comboBox_variable.addItem("Protected");
		referenceColumn.setCellEditor(new DefaultCellEditor(comboBox_variable));
		
		JComboBox comboBox_function = new JComboBox();
		comboBox_function.setFont(new Font("標楷", Font.PLAIN, 20));
		comboBox_function.addItem("Public");
		comboBox_function.addItem("Private");
		comboBox_function.addItem("Protected");
		referenceColumn_function.setCellEditor(new DefaultCellEditor(comboBox_function));
	    
		JComboBox comboBox_relationship = new JComboBox();
		comboBox_relationship.setFont(new Font("標楷", Font.PLAIN, 20));
		comboBox_relationship.addItem("Extension");
		comboBox_relationship.addItem("Implementation");
		comboBox_relationship.addItem("Association");
		comboBox_relationship.addItem("Aggregation");
		comboBox_relationship.addItem("Composition");
		comboBox_relationship.addItem("Dependency");
		referenceColumn_relationship.setCellEditor(new DefaultCellEditor(comboBox_relationship));
		
		
	}
	
//	public ArrayList<ClassMemberAbstract> getTableValue(JTable temp,ClassMemberAbstract member,String choice)
//	{
//		//要改
//		
//		ArrayList<ClassMemberAbstract> result =new ArrayList<ClassMemberAbstract>();
//		int row = temp.getModel().getRowCount();
//		int column = temp.getModel().getColumnCount();
//		Object selected=null;
//		for (int i=0; i < row; i++)
//		{
//		  if ( choice == "Variable" ) member = new MemberVariable(); // 三個型別共用function
//		  else if ( choice == "Function") member = new MemberFunction();
//		  else if ( choice == "Relation" ) member = new ClassRelarionship();
//		  else return null;
//		  
//		  for (int j=0; j < column; j++)
//		  {
//			selected = temp.getModel().getValueAt(i,j);
//		    if ( selected != "" && selected != null )
//		    {
//		      if ( j == 0 ) member.setReference(selected.toString());
//			  else if ( j == 1 && temp.getColumnName(j) != "Class Name"  ) member.setType(selected.toString()); // Class Name不是呼叫setType
//			  else member.setName(selected.toString());
//		    }	    
//		  }	  
//		  
//		  if ( selected != "" && selected != null) result.add(member);
//		  else break;
//		    
//		}
//		
//		return result;
//
//	}
	
	
//	public void clearTableValue(JTable temp)
//	{
//		int row = temp.getModel().getRowCount();
//		int column = temp.getModel().getColumnCount();
//		Object selected;		
//		for (int i=0; i < row; i++)
//		{	  
//		  for (int j=0; j < column; j++)
//		  {
//			temp.getModel().setValueAt("",i,j); 
//		  }	  
//		}
//		
//	}
//	
//	public void showOnTextArea(JTextArea _textShowDetail, ClassDetailInfo _gp) 
//	{
//		_textShowDetail.setText("");
//		if ( ! _gp.getClassName().isEmpty())
//		  _textShowDetail.append("Class Name : " + _gp.getClassName() +"\n");
//		
//		if ( ! _gp.getMemberVariable().isEmpty() )
//		  _textShowDetail.append("MemberVariable : " +"\n");
//		for ( ClassMemberAbstract temp : _gp.getMemberVariable())
//		{
//			String ans = temp.getReference()+ " " + temp.getType() + " " + temp.getName() + "\n";
//			_textShowDetail.append(ans);
//		}
//		
//		if ( ! _gp.getMemberFunction().isEmpty() )
//		  _textShowDetail.append("MemberFunction : " +"\n");
//		
//		for ( ClassMemberAbstract temp : _gp.getMemberFunction())
//		{
//			String ans = temp.getReference()+ " " + temp.getType() + " " + temp.getName() + "\n";
//			_textShowDetail.append(ans);
//		}
//		
//		if ( ! _gp.getClassRelarionship().isEmpty() ) 
//			_textShowDetail.append("ClassRelarionship : " +"\n");
//		for ( ClassMemberAbstract temp : _gp.getClassRelarionship())
//		{
//			String ans = temp.getReference()+ " " + temp.getName() + "\n";
//			_textShowDetail.append(ans);
//		}
//	}
}
